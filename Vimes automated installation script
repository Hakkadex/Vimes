#!/bin/bash

# Create the Vimes directory and navigate to it
mkdir -p ~/Vimes
cd ~/Vimes

# Create and populate the Vimes.py file
cat << 'EOF' > Vimes.py
#!/usr/bin/env python3

import sys
import requests
from bs4 import BeautifulSoup
import urllib.parse
from datetime import datetime

SEARCH_ENGINES = {
    'Google': 'https://www.google.com/search',
    'Bing': 'https://www.bing.com/search',
    'DuckDuckGo': 'https://duckduckgo.com/',
    'Yandex': 'https://yandex.com/search/'
}

def fetch_news(location, query):
    """Fetch recent news articles from Google News."""
    search_query = f"{location} {query}"
    url = f"https://www.google.com/search?q={urllib.parse.quote(search_query)}&tbm=nws&tbs=qdr:m"  # Filter results for the past 6 months
    headers = {
        'User-Agent': 'Vimes CLI Tool'
    }
    
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"Error fetching news: {e}")
        return []

    soup = BeautifulSoup(response.text, 'html.parser')

    articles = []
    for item in soup.find_all('div', class_='dbsr'):
        title_tag = item.find('div', class_='JheGif')
        if not title_tag:
            continue
        title = title_tag.get_text()
        link = item.find('a')['href']
        date_tag = item.find('span', class_='WG9SHc')
        if date_tag:
            date_str = date_tag.get_text()
            date = parse_date(date_str)
        else:
            date = datetime.now()  # Use current date if no date is available

        articles.append({'title': title, 'url': link, 'date': date})

    # Sort articles by date in descending order
    articles.sort(key=lambda x: x['date'], reverse=True)
    
    return articles

def parse_date(date_str):
    """Parse date from the string to a datetime object."""
    try:
        return datetime.strptime(date_str, '%b %d, %Y')
    except ValueError:
        return datetime.now()  # Fallback to now if parsing fails

def display_results(results):
    """Display search results in the terminal."""
    if not results:
        print("No results found.")
        return

    for result in results:
        print(f"Title: {result['title']}")
        print(f"URL: {result['url']}")
        print(f"Date: {result['date'].strftime('%Y-%m-%d')}\n")
        print("-" * 80)

def main():
    if len(sys.argv) < 2:
        print("Usage: vimesget <location> [options]")
        print("Options:")
        print("  -s  Search for stabbings and knife attacks")
        print("  -r  Search for robberies")
        print("  -m  Search for murders")
        print("  -g  Search for gang-related incidents")
        sys.exit(1)

    location = sys.argv[1]
    query = "crimes OR arrests OR wanted OR charges"

    if len(sys.argv) > 2:
        option = sys.argv[2]
        if option == '-s':
            query = "stabbing OR knife attack"
        elif option == '-r':
            query = "robbery OR robbed OR robbers"
        elif option == '-m':
            query = "murder OR murdered"
        elif option == '-g':
            query = "gang attack OR gang fight OR gang members"
        else:
            print(f"Unknown option: {option}")
            sys.exit(1)

    results = fetch_news(location, query)
    display_results(results)

if __name__ == "__main__":
    main()
EOF

# Make the Vimes.py file executable
chmod +x Vimes.py

# Create a symlink to make the command available in the PATH
sudo ln -sf ~/Vimes/Vimes.py /usr/local/bin/vimesget

# Notify user of completion
echo "Installation complete. You can now use the 'vimesget' command from anywhere."
