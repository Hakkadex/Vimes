#!/bin/bash

# Define the directory path
DIRECTORY=~/Desktop/Vimes

# Create the Vimes directory on the desktop and navigate to it
mkdir -p "$DIRECTORY"
cd "$DIRECTORY"

# Create and populate the Vimes.py file
cat << 'EOF' > Vimes.py
#!/usr/bin/env python3

import sys
import requests
from bs4 import BeautifulSoup
import urllib.parse
import logging
from datetime import datetime

# Set up logging for debugging
logging.basicConfig(
    filename='vimes_debug.log',
    filemode='w',
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)

SEARCH_ENGINES = {
    'Google': 'https://www.google.com/search',
    'Bing': 'https://www.bing.com/search',
    'DuckDuckGo': 'https://duckduckgo.com/',
    'Yandex': 'https://yandex.com/search/'
}

SEARCH_TERMS = [
    'murder', 'stabbing', 'robbery', 'shooting', 'gang violence', 'gang attack'
]

def perform_search(query, engine):
    """Perform a search on the specified search engine."""
    search_query = f"{query} crime news"
    logging.debug(f"Search Query: {search_query} on {engine}")
    headers = {
        'User-Agent': 'Vimes CLI Tool'
    }

    params = {'q': search_query}
    if engine == 'DuckDuckGo':
        params = {'q': search_query}
    elif engine == 'Yandex':
        params = {'text': search_query}

    try:
        response = requests.get(SEARCH_ENGINES[engine], headers=headers, params=params)
        response.raise_for_status()
        logging.debug(f"HTTP Response Status: {response.status_code} for query: {search_query}")
        
        soup = BeautifulSoup(response.text, 'html.parser')
        headlines = []

        if engine == 'Google':
            for item in soup.find_all('h3'):
                title = item.get_text()
                parent_a = item.find_parent('a')
                if parent_a and parent_a.has_attr('href'):
                    url = parent_a['href']
                    headlines.append({'title': title, 'url': url})
                    logging.debug(f"Found Google headline: {title} with URL: {url}")

        elif engine == 'Bing':
            for item in soup.find_all('li', class_='b_algo'):
                title = item.find('h2').get_text()
                parent_a = item.find('a')
                if parent_a and parent_a.has_attr('href'):
                    url = parent_a['href']
                    headlines.append({'title': title, 'url': url})
                    logging.debug(f"Found Bing headline: {title} with URL: {url}")

        elif engine == 'DuckDuckGo':
            for item in soup.find_all('a', class_='result__a'):
                title = item.get_text()
                url = item['href']
                headlines.append({'title': title, 'url': url})
                logging.debug(f"Found DuckDuckGo headline: {title} with URL: {url}")

        elif engine == 'Yandex':
            for item in soup.find_all('h2', class_='organic__title'):
                title = item.get_text()
                parent_a = item.find_parent('a')
                if parent_a and parent_a.has_attr('href'):
                    url = parent_a['href']
                    headlines.append({'title': title, 'url': url})
                    logging.debug(f"Found Yandex headline: {title} with URL: {url}")

        return headlines

    except requests.exceptions.RequestException as e:
        logging.error(f"An error occurred while querying {engine}: {e}")
        return []

def display_results(results):
    """Display search results in the terminal."""
    if not results:
        print("No results found.")
        logging.info("No results found.")
        return

    for result in results:
        print(f"Title: {result['title']}")
        print(f"URL: {result['url']}\n")
        print("-" * 80)

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: vimesget <location>")
        logging.error("Usage: vimesget <location>")
        sys.exit(1)

    location = sys.argv[1]
    all_headlines = []

    # Perform main search on all search engines
    for engine in SEARCH_ENGINES.keys():
        print(f"Querying {engine}...")
        logging.info(f"Querying {engine}...")
        headlines = perform_search(location, engine)
        all_headlines.extend(headlines)

    # Remove duplicate headlines
    unique_headlines = {h['title']: h for h in all_headlines}.values()
    sorted_headlines = sorted(unique_headlines, key=lambda x: x['title'])

    display_results(sorted_headlines)
EOF

# Make the Vimes.py file executable
chmod +x Vimes.py

# Create a symlink to make the command available in the PATH
ln -sf "$DIRECTORY/Vimes.py" /usr/local/bin/vimesget

echo "Installation complete. You can now use the 'vimesget' command from anywhere."
